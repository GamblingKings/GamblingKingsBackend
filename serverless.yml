service: gamblingkingsbackend

#######################################
# Plugins
#######################################
plugins:
  - serverless-webpack
  #######################################
  # Uncomment this for local dev only
  #######################################
  - serverless-offline
  - serverless-dynamodb-local
  - offline-invalidate

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'yarn'
    forceExclude:
      - aws-sdk
    packagerOptions:
      scripts:
        - yarn autoclean --init
        - rm .yarnclean && cat .yarnclean >> .yarnclean && echo '\n*.ts' >> .yarnclean
        - rm -rf node_modules/aws-sdk
        - yarn autoclean --force
  #######################################
  # Uncomment this for local dev only
  #######################################
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

#######################################
# Provider
#######################################
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  memorySize: 512 # optional, in MB, default is 1024
  timeout: 10 # optional, in seconds, default is 6

  websocketsApiName: mahjong-websocket
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
      Resource:
        - Fn::GetAtt: [Connections, Arn]
        - Fn::GetAtt: [Games, Arn]
        - Fn::GetAtt: [GameState, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [Connections, Arn]
              - '*'
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [Games, Arn]
              - '*'
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [GameState, Arn]
              - '*'

  # you can define service wide environment variables here
  environment:
    CONNECTIONS_TABLE:
      Ref: Connections
    GAMES_TABLE:
      Ref: Games
    GAME_STATE_TABLE:
      Ref: GameState
    API_REGION: '${self:provider.region}'
    NODE_PATH: /opt/nodejs:/opt/nodejs/node12/node_modules:/opt/nodejs/node_modules:/var/runtime/node_modules:/var/runtime:/var/task
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1 # Enable AWS connection reuse to reuse HTTP connections

#######################################
# Lambda Functions
#######################################
package:
  individually: true

functions:
  # Default handler
  defaultHandler:
    handler: src/functions/defaultMessage.handler
    events:
      - websocket: $default
  # Connection handlers
  onConnect:
    handler: src/functions/connection/onConnect.handler
    events:
      - websocket: $connect
  onDisconnect:
    handler: src/functions/connection/onDisconnect.handler
    events:
      - websocket: $disconnect
  onSetUsername:
    handler: src/functions/connection/onSetUsername.handler
    events:
      - websocket: SET_USERNAME
  # Lobby handlers
  onCreateGame:
    handler: src/functions/lobby/onCreateGame.handler
    events:
      - websocket: CREATE_GAME
  onGetAllUsers:
    handler: src/functions/lobby/onGetAllUsers.handler
    events:
      - websocket: GET_ALL_USERS
  onGetAllGames:
    handler: src/functions/lobby/onGetAllGames.handler
    events:
      - websocket: GET_ALL_GAMES
  onSendMessage:
    handler: src/functions/lobby/onSendMessage.handler
    events:
      - websocket: SEND_MESSAGE
  onJoinGame:
    handler: src/functions/lobby/onJoinGame.handler
    events:
      - websocket: JOIN_GAME
  onLeaveGame:
    handler: src/functions/lobby/onLeaveGame.handler
    events:
      - websocket: LEAVE_GAME
  onStartGame:
    handler: src/functions/lobby/onStartGame.handler
    events:
      - websocket: START_GAME
  # Game handlers
  onGamePageLoad:
    handler: src/functions/game/onGamePageLoad.handler
    events:
      - websocket: GAME_PAGE_LOAD
  onDrawTile:
    handler: src/functions/game/onDrawTile.handler
    events:
      - websocket: DRAW_TILE
  onPlayTile:
    handler: src/functions/game/onPlayTile.handler
    events:
      - websocket: PLAY_TILE
  onPlayedTileInteraction:
    handler: src/functions/game/onPlayedTileInteraction.handler
    events:
      - websocket: PLAYED_TILE_INTERACTION
  onWinRound:
    handler: src/functions/game/onWinRound.handler
    timeout: 15 # optional, in seconds, default is 6
    events:
      - websocket: WIN_ROUND
  onSelfPlayTile:
    handler: src/functions/game/onSelfPlayTile.handler
    events:
      - websocket: SELF_PLAY_TILE

  # For testing
  createTestGameState:
    handler: src/functions/test/createTestGameState.handler
    events:
      - websocket: CREATE_TEST_GAMESTATE

#######################################
# Resources (e.g. dynamoDB tables)
#######################################
resources:
  - ${file(./dynamodb.yml)}
