service: gamblingkingsbackend

plugins:
  - serverless-plugin-typescript
  #######################################
  # Uncomment this for local dev only
  #######################################
  - serverless-offline
  - serverless-dynamodb-local

#######################################
# Uncomment this for local dev only
#######################################
custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2

  websocketsApiName: mahjong-websocket
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
      Resource:
        - Fn::GetAtt: [ConnectionsTable, Arn]
        - Fn::GetAtt: [GamesTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConnectionsTable, Arn]
              - '*'
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [GamesTable, Arn]
              - '*'

  # you can define service wide environment variables here
  environment:
    CONNECTIONS_TABLE:
      Ref: ConnectionsTable
    GAMES_TABLE:
      Ref: GamesTable
    API_REGION: '${self:provider.region}'
    NODE_PATH: /opt/nodejs:/opt/nodejs/node12/node_modules:/opt/nodejs/node_modules:/var/runtime/node_modules:/var/runtime:/var/task
    ENV: prod

package:
  include:
    - src/
  exclude:
    - node_modules/**
    - .dynamodb/**
    - lambda_layer/**

layers:
  main:
    description: layer that holds all the main dependencies
    package:
      artifact: lambda_layer.zip

functions:
  onConnect:
    handler: src/functions/onConnect.handler
    events:
      - websocket: $connect
    layers:
      - { Ref: MainLambdaLayer } # should be named as TitleCased name followed by LambdaLayer
  onDisconnect:
    handler: src/functions/onDisconnect.handler
    events:
      - websocket: $disconnect
    layers:
      - { Ref: MainLambdaLayer }
  defaultHandler:
    handler: src/functions/defaultMessage.handler
    events:
      - websocket: $default
    layers:
      - { Ref: MainLambdaLayer }
  setUsername:
    handler: src/functions/onSetUsername.handler
    events:
      - websocket: SET_USERNAME
    layers:
      - { Ref: MainLambdaLayer }
  getAllUsers:
    handler: src/functions/onGetAllUsers.handler
    events:
      - websocket: GET_ALL_USERS
    layers:
      - { Ref: MainLambdaLayer }
  createGame:
    handler: src/functions/onCreateGame.handler
    events:
      - websocket: CREATE_GAME
    layers:
      - { Ref: MainLambdaLayer }
  getAllGames:
    handler: src/functions/onGetAllGames.handler
    events:
      - websocket: GET_ALL_GAMES
    layers:
      - { Ref: MainLambdaLayer }
  sendMessage:
    handler: src/functions/onSendMessage.handler
    events:
      - websocket: SEND_MESSAGE
    layers:
      - { Ref: MainLambdaLayer }

# you can add CloudFormation resource templates here
resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConnectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GamesTable
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
