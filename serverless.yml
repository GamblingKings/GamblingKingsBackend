service: gamblingkingsbackend

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

# Uncomment for local dev only
# custom:
#   dynamodb:
#     # If you only want to use DynamoDB Local in some stages, declare them here
#     stages:
#       - dev
#     start:
#       port: 8000
#       inMemory: true
#       heapInitial: 200m
#       heapMax: 1g
#       migrate: true
#       seed: true
#       convertEmptyValues: true
#     # Uncomment only if you already have a DynamoDB running locally
#     # noStart: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2

  websocketsApiName: mahjong-websocket
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:BatchWriteItem'
        - 'dynamodb:Query'
      Resource:
        - Fn::GetAtt: [ConnectionDynamoDBTable, Arn]
        - Fn::GetAtt: [GamesDynamoDBTable, Arn]
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [ConnectionDynamoDBTable, Arn]
              - '*'
        - Fn::Join:
            - '/'
            - - Fn::GetAtt: [GamesDynamoDBTable, Arn]
              - '*'

  # you can define service wide environment variables here
  environment:
    ConnectionDynamoDBTable:
      Ref: ConnectionDynamoDBTable
    GamesDynamoDBTable:
      Ref: GamesDynamoDBTable
    API_REGION: '${self:provider.region}'

layers:
  aws:
    description: layer that holds the aws_sdk
    package:
      artifact: src/aws_sdk_layer.zip

functions:
  onConnect:
    handler: src/handler.onConnect
    events:
      - websocket: $connect
  onDisconnect:
    handler: src/handler.onDisconnect
    events:
      - websocket: $disconnect
  defaultHandler:
    handler: src/handler.defaultMessage
    events:
      - websocket: $default

# you can add CloudFormation resource templates here
resources:
  Resources:
    ConnectionDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConnectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GamesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GamesTable
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
