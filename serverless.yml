service: gamblingkingsbackend

plugins:
  - serverless-plugin-typescript

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-west-2

  websocketsApiName: mahjong-websocket
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
      Resource:
        - Fn::GetAtt: [ConnectionDynamoDBTable, Arn]
        - Fn::GetAtt: [GamesDynamoDBTable, Arn]
        - Fn::Join:
            - "/"
            - - Fn::GetAtt: [ConnectionDynamoDBTable, Arn]
              - "*"
        - Fn::Join:
            - "/"
            - - Fn::GetAtt: [GamesDynamoDBTable, Arn]
              - "*"

  # you can define service wide environment variables here
  environment:
    ConnectionDynamoDBTable:
      Ref: ConnectionDynamoDBTable
    GamesDynamoDBTable:
      Ref: GamesDynamoDBTable
    API_REGION: "${self:provider.region}"

layers:
  aws:
    description: layer that holds the aws_sdk
    package:
      artifact: src/aws_sdk_layer.zip

functions:
  # manage connection and disconnection of clients
  connectionManager:
    handler: src/handler.connectionManager
    layers:
      - { Ref: AwsLambdaLayer }
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect

  defaultMessages:
    handler: src/handler.defaultMessage
    events:
      - websocket:
          route: $default
# you can add CloudFormation resource templates here
resources:
  Resources:
    ConnectionDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ConnectionsTable
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GamesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: GamesTable
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
